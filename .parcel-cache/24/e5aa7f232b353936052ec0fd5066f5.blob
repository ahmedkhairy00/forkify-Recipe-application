"use strict";

require("core-js/modules/web.immediate.js");
var model = _interopRequireWildcard(require("./model.js"));
var _config = require("./config.js");
var _recipeViews = _interopRequireDefault(require("./views/recipeViews.js"));
var _searchViews = _interopRequireDefault(require("./views/searchViews.js"));
var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));
var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));
var _bookmarksView = _interopRequireDefault(require("./views/bookmarksView.js"));
var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// https://forkify-api.herokuapp.com/v2

//Notes For ME
/* 
to get all ingredients => we will make loop for it
and get data we need from ingredients as string by use join() method

Example : - 

${recipe.ingredients.map(ing => {
  return `
        <li class="recipe__ingredient">
                <svg class="recipe__icon">
                    <use href="src/img/icons.svg#icon-check"></use>
                </svg>
                <div class="recipe__quantity">${ing.quantity}</div> 
                    <span class="recipe__unit">${ing.unit}</span>
                    ${ing.description}
                </div>
          </li>
  
  `;
}).join('')}

* need to import icons file to appear in application
import icons from 'url:../img/icons.svg';
and we can use icons like this : -
                  <use href="${icons}#icon-clock"></use>


=> there problem for that , and solve it by => add to script file in html type="module"


* we download two packages to support old browser
  npm i core-js regenerator-runtime

 - and imported these two packages 
 import 'core-js/stable';
 import 'regenerator-runtime/runtime';

 * Many are real world Application have two special Module that are completely independent of the rest of the architecture 
  * and these are a Module for the project configuration and also Module for some general helper functions 
  *  1 - config.js => in this file we basically put all the variables that should be CONSTANTS , and should be reused across the project 
  * 2 - helper.js

* We Will Create View.js => As Parent Class for every class Views , for that it will contain all duplicated method and data and we will make to these extends from child view class
 * duplicated methods and property =>
 
*/

// get recipes from Api
const controlRecipes = async function () {
  try {
    // get hash from link
    const id = window.location.hash.slice(1);
    if (!id) return;
    // render Spinner
    _recipeViews.default.renderSpinner();

    // 0 ) Update results view to mark selected search result
    _resultsView.default.update(model.getSearchResultsPage());
    // 1) update bookmarksView
    _bookmarksView.default.update(model.state.bookmarks);

    // 2 ) Loading recipe
    await model.loadRecipe(id);

    // 3 ) Rendering recipe
    _recipeViews.default.render(model.state.recipe);
  } catch (err) {
    _recipeViews.default.renderError();
  }
};
const controlSearchResults = async function () {
  try {
    _resultsView.default.renderSpinner();

    //  1- Get search query
    const query = _searchViews.default.getQuery();
    if (!query) return;

    // 2 - Load search results
    await model.loadSearchResult(query);

    //  3 - Render results 
    // resultsView.render(model.state.search.results)
    _resultsView.default.render(model.getSearchResultsPage());

    // 4 - Render initial pagination buttons 
    _paginationView.default.render(model.state.search);
  } catch (err) {
    throw err;
  }
};
const controlPagination = function (goToPage) {
  //  3 - Render New results 
  // resultsView.render(model.state.search.results)
  _resultsView.default.render(model.getSearchResultsPage(goToPage));

  // 4 - Render New  pagination buttons 
  _paginationView.default.render(model.state.search);
};

// Serving Controller
const controlServings = function (newServings) {
  //Update the recipe servings (in state)
  model.updateServings(newServings);
  //Update the recipe view
  //   recipeView.render(model.state.recipe);
  // create update method to up date only text and attribute in DOM .
  _recipeViews.default.update(model.state.recipe);
};

// controller bookmark
const controlAddBookmark = function () {
  // 1) Add/remove bookmark
  if (!model.state.recipe.bookmarked) model.addBookmark(model.state.recipe);else model.deleteBookmark(model.state.recipe.id);
  // 2) update recipe view
  _recipeViews.default.update(model.state.recipe);

  // 3) render bookmarks
  _bookmarksView.default.render(model.state.bookmarks);
};
const controlBookmarks = function () {
  _bookmarksView.default.render(model.state.bookmarks);
};
const controlAddRecipe = async function (newRecipe) {
  try {
    //Show loading Spinner
    _addRecipeView.default.renderSpinner();

    // Upload the new Recipe data
    await model.uploadRecipe(newRecipe);
    console.log(model.state.recipe);
    // Render recipe
    _recipeViews.default.render(model.state.recipe);

    // Success Message
    _addRecipeView.default.renderMessage();

    // Render bookmark view
    _bookmarksView.default.render(model.state.bookmarks);

    // Change ID in URL
    window.history.pushState(null, '', `#${model.state.recipe.id}`);

    // Close form window
    setTimeout(function () {
      _addRecipeView.default.toggleWindow();
    }, _config.MODEL_CLOSE_SEC * 1000);
  } catch (err) {
    console.error('ðŸ’¥', err);
    _addRecipeView.default.renderError(err.message);
  }
};

// Use Subscriber publisher Pattern 
const init = function () {
  _bookmarksView.default.addHandlerRender(controlBookmarks);
  _recipeViews.default.addHandlerRender(controlRecipes);
  _searchViews.default.addHandlerSearch(controlSearchResults);
  _paginationView.default.addHandlerClick(controlPagination);
  _recipeViews.default.addHandlerUpdateServings(controlServings);
  _recipeViews.default.addHandlerAddBookmark(controlAddBookmark);
  _addRecipeView.default._addHandlerUpload(controlAddRecipe);
};
init();