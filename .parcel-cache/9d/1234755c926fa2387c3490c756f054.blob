"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class View {
  _data;

  /**
   * 
   * Render The Received data to the DOM 
   * @param {Object | Object[]} data the data to be rendered (e.g recipe)
   * @param {boolean} [render = true] if false, create markup string instead of rendering to the DOM 
   * @returns {undefined | string} A markup string is returned if render=false
   * @this {Object} View Instance
   * @author Ahmed Khairy
   * @todo Finish Implementation
   */
  render(data, render = true) {
    if (!data || Array.isArray(data) && data.length === 0) return this.renderError();
    this._data = data;
    const markup = this._generateMarkup();
    if (!render) return markup;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
  update(data) {
    this._data = data;
    const newMarkup = this._generateMarkup();
    // Here we will need entire Markup to compare it will old Markup.
    const newDom = document.createRange().createContextualFragment(newMarkup);
    const newElements = Array.from(newDom.querySelectorAll('*'));
    const curElements = Array.from(this._parentElement.querySelectorAll('*'));

    // Here we will loop over the two array to get equalNode => by use isEqualNode() Method
    newElements.forEach((newEl, i) => {
      const curEL = curElements[i];
      // we must get element that changed , and it text have textNode 

      //Update changed TEXT
      if (!newEl.isEqualNode(curEL) && newEl.firstChild?.nodeValue.trim() !== '') {
        curEL.textContent = newEl.textContent;
      }
      //Update changed ATTRIBUTE
      if (!newEl.isEqualNode(curEL)) {
        Array.from(newEl.attributes).forEach(attr => curEL.setAttribute(attr.name, attr.value));
      }
    });
  }
  _clear() {
    this._parentElement.innerHTML = '';
  }
  // render Spinner
  renderSpinner() {
    const markup = `
            <div class="spinner">
              <svg>
                <use href="${_icons.default}#icon-loader"></use>
              </svg>
            </div>
      `;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
  renderError(message = this._errorMessage) {
    const markup = `
      <div class="error">
      <div>
        <svg>
          <use href="${_icons.default}#icon-alert-triangle"></use>
        </svg>
      </div>
      <p>${message}</p>
    </div>
      `;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
  renderMessage(message = this._message) {
    const markup = `
      <div class="message">
      <div>
        <svg>
          <use href="${_icons.default}#icon-smile"></use>
        </svg>
      </div>
      <p>${message}</p>
    </div>
      `;
    this._clear();
    this._parentElement.insertAdjacentHTML('afterbegin', markup);
  }
}
exports.default = View;